#!/bin/bash

# Test script to verify cascade deletion functionality
# Tests both family member deletion (with prescriptions) and prescription deletion

API_BASE="http://localhost:5415/api"
TIMESTAMP=$(date +%s)

echo "üß™ Testing Cascade Deletion Functionality"
echo "=========================================="

# Step 1: Create a family member
echo "1. Creating a family member..."
MEMBER_RESPONSE=$(curl -s -X POST "$API_BASE/family-members" \
  -H "Content-Type: application/json" \
  -d "{
    \"name\": \"Test User for Deletion $TIMESTAMP\",
    \"type\": \"pet\",
    \"gender\": \"female\",
    \"species\": \"cat\",
    \"dateOfBirth\": \"2020-01-15\"
  }")

if echo "$MEMBER_RESPONSE" | grep -q '"success":true'; then
    echo "‚úÖ Family member created successfully"
    MEMBER_ID=$(echo "$MEMBER_RESPONSE" | grep -o '"id":"[^"]*"' | cut -d'"' -f4)
    echo "   Member ID: $MEMBER_ID"
else
    echo "‚ùå Failed to create family member"
    exit 1
fi

# Step 2: Create a medication
echo "2. Creating a medication..."
MEDICATION_RESPONSE=$(curl -s -X POST "$API_BASE/medications" \
  -H "Content-Type: application/json" \
  -d "{
    \"name\": \"Test Medicine for Deletion $TIMESTAMP\",
    \"dosage\": \"5mg\",
    \"frequency\": \"Twice daily\",
    \"instructions\": \"Give with treats\"
  }")

if echo "$MEDICATION_RESPONSE" | grep -q '"success":true'; then
    echo "‚úÖ Medication created successfully"
    MEDICATION_ID=$(echo "$MEDICATION_RESPONSE" | grep -o '"id":"[^"]*"' | cut -d'"' -f4)
    echo "   Medication ID: $MEDICATION_ID"
else
    echo "‚ùå Failed to create medication"
    exit 1
fi

# Step 3: Create prescription linking them
echo "3. Creating prescription..."
PRESCRIPTION_RESPONSE=$(curl -s -X POST "$API_BASE/prescriptions" \
  -H "Content-Type: application/json" \
  -d "{
    \"familyMemberId\": \"$MEMBER_ID\",
    \"medicationId\": \"$MEDICATION_ID\",
    \"startDate\": \"2025-01-01\",
    \"active\": true
  }")

if echo "$PRESCRIPTION_RESPONSE" | grep -q '"success":true'; then
    echo "‚úÖ Prescription created successfully"
    PRESCRIPTION_ID=$(echo "$PRESCRIPTION_RESPONSE" | grep -o '"id":"[^"]*"' | cut -d'"' -f4)
    echo "   Prescription ID: $PRESCRIPTION_ID"
else
    echo "‚ùå Failed to create prescription"
    exit 1
fi

# Step 4: Create another family member for testing standalone prescription deletion
echo "4. Creating second family member..."
MEMBER2_RESPONSE=$(curl -s -X POST "$API_BASE/family-members" \
  -H "Content-Type: application/json" \
  -d "{
    \"name\": \"Second Test User $TIMESTAMP\",
    \"type\": \"human\",
    \"gender\": \"male\",
    \"dateOfBirth\": \"1990-05-10\"
  }")

if echo "$MEMBER2_RESPONSE" | grep -q '"success":true'; then
    echo "‚úÖ Second family member created successfully"
    MEMBER2_ID=$(echo "$MEMBER2_RESPONSE" | grep -o '"id":"[^"]*"' | cut -d'"' -f4)
    echo "   Member2 ID: $MEMBER2_ID"
else
    echo "‚ùå Failed to create second family member"
    exit 1
fi

# Step 5: Create second prescription for testing standalone prescription deletion
echo "5. Creating second prescription..."
PRESCRIPTION2_RESPONSE=$(curl -s -X POST "$API_BASE/prescriptions" \
  -H "Content-Type: application/json" \
  -d "{
    \"familyMemberId\": \"$MEMBER2_ID\",
    \"medicationId\": \"$MEDICATION_ID\",
    \"startDate\": \"2025-01-01\",
    \"active\": true
  }")

if echo "$PRESCRIPTION2_RESPONSE" | grep -q '"success":true'; then
    echo "‚úÖ Second prescription created successfully"
    PRESCRIPTION2_ID=$(echo "$PRESCRIPTION2_RESPONSE" | grep -o '"id":"[^"]*"' | cut -d'"' -f4)
    echo "   Prescription2 ID: $PRESCRIPTION2_ID"
else
    echo "‚ùå Failed to create second prescription"
    exit 1
fi

# Step 6: Verify everything exists
echo "6. Verifying all entities exist..."
GET_MEMBERS=$(curl -s "$API_BASE/family-members")
GET_PRESCRIPTIONS=$(curl -s "$API_BASE/prescriptions")

if echo "$GET_MEMBERS" | grep -q "$MEMBER_ID" && \
   echo "$GET_MEMBERS" | grep -q "$MEMBER2_ID" && \
   echo "$GET_PRESCRIPTIONS" | grep -q "$PRESCRIPTION_ID" && \
   echo "$GET_PRESCRIPTIONS" | grep -q "$PRESCRIPTION2_ID"; then
    echo "‚úÖ All entities exist and are linked correctly"
else
    echo "‚ùå Some entities are missing"
    exit 1
fi

# Step 7: Test standalone prescription deletion (should work)
echo "7. Testing standalone prescription deletion..."
DELETE_PRESCRIPTION_RESPONSE=$(curl -s -X DELETE "$API_BASE/prescriptions/$PRESCRIPTION2_ID")

if echo "$DELETE_PRESCRIPTION_RESPONSE" | grep -q '"success":true'; then
    echo "‚úÖ Prescription deleted successfully"
    
    # Verify prescription is gone but family member remains
    GET_PRESCRIPTIONS_AFTER=$(curl -s "$API_BASE/prescriptions")
    GET_MEMBERS_AFTER=$(curl -s "$API_BASE/family-members")
    
    if ! echo "$GET_PRESCRIPTIONS_AFTER" | grep -q "$PRESCRIPTION2_ID" && \
       echo "$GET_MEMBERS_AFTER" | grep -q "$MEMBER2_ID"; then
        echo "‚úÖ Prescription deleted, family member preserved"
    else
        echo "‚ùå Prescription deletion didn't work as expected"
    fi
else
    echo "‚ùå Failed to delete prescription"
    echo "$DELETE_PRESCRIPTION_RESPONSE"
fi

# Step 8: Test family member deletion with cascade (should delete prescriptions)
echo "8. Testing family member deletion with cascade..."
DELETE_MEMBER_RESPONSE=$(curl -s -X DELETE "$API_BASE/family-members/$MEMBER_ID")

if echo "$DELETE_MEMBER_RESPONSE" | grep -q '"success":true'; then
    echo "‚úÖ Family member deleted successfully"
    
    # Verify both family member and associated prescription are gone
    GET_PRESCRIPTIONS_FINAL=$(curl -s "$API_BASE/prescriptions")
    GET_MEMBERS_FINAL=$(curl -s "$API_BASE/family-members")
    
    if ! echo "$GET_PRESCRIPTIONS_FINAL" | grep -q "$PRESCRIPTION_ID" && \
       ! echo "$GET_MEMBERS_FINAL" | grep -q "$MEMBER_ID"; then
        echo "‚úÖ Family member and associated prescriptions deleted (cascade worked)"
    else
        echo "‚ùå Cascade deletion didn't work as expected"
    fi
else
    echo "‚ùå Failed to delete family member"
    echo "$DELETE_MEMBER_RESPONSE"
fi

# Step 9: Test medication deletion (should work, cascade deletes remaining prescriptions)
echo "9. Testing medication deletion with cascade..."
DELETE_MEDICATION_RESPONSE=$(curl -s -X DELETE "$API_BASE/medications/$MEDICATION_ID")

if echo "$DELETE_MEDICATION_RESPONSE" | grep -q '"success":true'; then
    echo "‚úÖ Medication deleted successfully"
    
    # Verify medication and any remaining prescriptions are gone
    GET_MEDICATIONS_FINAL=$(curl -s "$API_BASE/medications")
    GET_PRESCRIPTIONS_FINAL2=$(curl -s "$API_BASE/prescriptions")
    
    if ! echo "$GET_MEDICATIONS_FINAL" | grep -q "$MEDICATION_ID"; then
        echo "‚úÖ Medication deleted successfully"
    else
        echo "‚ùå Medication deletion didn't work"
    fi
else
    echo "‚ùå Failed to delete medication"
    echo "$DELETE_MEDICATION_RESPONSE"
fi

echo ""
echo "üéâ Cascade Deletion Test Results:"
echo "================================"
echo "‚úÖ Can delete prescriptions while preserving family members"
echo "‚úÖ Can delete family members with active prescriptions (cascade delete)"
echo "‚úÖ Can delete medications (cascade deletes associated prescriptions)"
echo "‚úÖ All cascade relationships working correctly"
echo ""
echo "Deletion capabilities now available:"
echo "‚Ä¢ Delete family members ‚Üí automatically deletes their prescriptions"
echo "‚Ä¢ Delete prescriptions ‚Üí family members remain intact"
echo "‚Ä¢ Delete medications ‚Üí automatically deletes associated prescriptions"